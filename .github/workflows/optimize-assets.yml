name: Optimize Assets

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 3 * * *'  # 每天凌晨3点执行

env:
  FFMPEG_VERSION: '6.1'
  NODE_VERSION: '20'
  UPSTREAM_REPO: 'https://github.com/pagefaultgames/pokerogue.git'
  GIT_USER_EMAIL: 'github-actions[bot]@users.noreply.github.com'
  GIT_USER_NAME: 'github-actions[bot]'

jobs:
  optimize:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Cache Git Repository
        id: cache-repo
        uses: actions/cache@v4
        with:
          path: .git
          key: git-repo-${{ github.sha }}
          restore-keys: |
            git-repo-
      
      - name: Save current HEAD
        if: steps.cache-repo.outputs.cache-hit == 'true'
        id: save_head
        run: echo "previous_head=$(cat .git/HEAD)" >> $GITHUB_OUTPUT
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      
      - name: Setup Git and Check Upstream
        id: check_upstream
        run: |
          git config --local user.email "${{ env.GIT_USER_EMAIL }}"
          git config --local user.name "${{ env.GIT_USER_NAME }}"
          
          if ! git remote | grep -q '^upstream$'; then
            echo "first_run=true" >> $GITHUB_OUTPUT
            git remote add upstream ${{ env.UPSTREAM_REPO }}
          else
            echo "first_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync with upstream
        id: sync
        run: |
          git fetch upstream main
          
          PREVIOUS_HEAD="${{ steps.save_head.outputs.previous_head }}"
          CURRENT_HEAD=$(cat .git/HEAD)
          UPSTREAM_CHANGES=$(git rev-list HEAD..upstream/main --count)
          
          if [[ "$PREVIOUS_HEAD" != "$CURRENT_HEAD" || "$UPSTREAM_CHANGES" -gt 0 ]]; then
            echo "sync_status=updated" >> $GITHUB_OUTPUT
            echo "Changes detected (Local: ${PREVIOUS_HEAD} -> ${CURRENT_HEAD}, Upstream changes: ${UPSTREAM_CHANGES})"
            
            if [[ "$UPSTREAM_CHANGES" -gt 0 ]]; then
              if git merge upstream/main --no-edit; then
                git push
              else
                echo "sync_status=conflict" >> $GITHUB_OUTPUT
                git merge --abort
                exit 1
              fi
            fi
          else
            echo "sync_status=uptodate" >> $GITHUB_OUTPUT
          fi
      
      - name: Check Update Status
        id: update_check
        run: |
          if [[ "${{ steps.check_upstream.outputs.first_run }}" == "true" || "${{ steps.sync.outputs.sync_status }}" == "updated" ]]; then
            echo "should_process=true" >> $GITHUB_OUTPUT
          else
            echo "should_process=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup Node.js
        if: steps.update_check.outputs.should_process == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Cache FFmpeg
        if: steps.update_check.outputs.should_process == 'true'
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: ~/ffmpeg
          key: ${{ runner.os }}-ffmpeg-${{ env.FFMPEG_VERSION }}-${{ hashFiles('scripts/optimize-audio.js') }}
      
      - name: Install FFmpeg
        if: steps.update_check.outputs.should_process == 'true' && steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/ffmpeg
          wget -q https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz
          tar xf ffmpeg-release-amd64-static.tar.xz
          mv ffmpeg-*-amd64-static/ffmpeg ~/ffmpeg/
          mv ffmpeg-*-amd64-static/ffprobe ~/ffmpeg/
          rm -rf ffmpeg-*-amd64-static*
          echo "$HOME/ffmpeg" >> $GITHUB_PATH
      
      - name: Cache node_modules
        if: steps.update_check.outputs.should_process == 'true'
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-
      
      - name: Install dependencies
        if: steps.update_check.outputs.should_process == 'true' && steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm install sharp
      
      - name: Optimize Assets
        if: steps.update_check.outputs.should_process == 'true'
        id: optimize_assets
        continue-on-error: true
        run: |
          for script in download-external-scripts optimize-images optimize-audio optimize-json; do
            echo "Running $script..."
            if ! node scripts/$script.js; then
              echo "::error::Failed to run $script"
              exit 1
            fi
          done
      
      - name: Process Changes
        if: steps.update_check.outputs.should_process == 'true' && steps.optimize_assets.outcome == 'success'
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            # 获取更改的文件统计
            STATS=$(git diff --name-only | awk '
              /\.(png|jpg|jpeg|gif|webp)$/ { images++ }
              /\.(mp3|wav|ogg)$/ { audio++ }
              /\.json$/ { json++ }
              END {
                print "- Image files: " images "\n- Audio files: " audio "\n- JSON files: " json
              }
            ')
            
            git add -A
            git commit -m "Auto-optimize Resources\n\nOptimization Statistics:\n${STATS}"
            git push origin HEAD:auto-optimize -f
          fi